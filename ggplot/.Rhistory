shiny::runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/dist_fit_tool')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/dist_fit_tool')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/dist_fit_tool')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/dist_fit_tool')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/dist_fit_tool')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/dist_fit_tool')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/dist_fit_tool')
shiny::runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/layout_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/layout_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/functionality_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/reactive_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/reactive_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/dist_fit_tool')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/import_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/import_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/r_shiny/tabset_example')
library(ggplot2)
mpg <- ggplot2::mpg   #import data
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy),
color="blue") +
labs(title="Example scatterplot",
x="Displacement", y="Highway efficency")
ggplot(data=mpg) +
geom_histogram(mapping=aes(x=hwy))
ggplot(data=mpg) +
geom_histogram(mapping=aes(x=hwy,
col="black",
fill="grey"))
ggplot(data=mpg) +
geom_histogram(mapping=aes(x=hwy),
col="black",
fill="grey")
install.packages("simmer")
library(simmer)
set.seed(34)
patient <-
trajectory("Patient path") %>%
log_("Patient arrives") %>%
timeout(function() {rnorm(1, 5, 2)}) %>%
log_("Patient leaves")
hospital <-
simmer("hospital") %>%
add_generator("Patient", patient, function() {rexp(1, 1/10)})
hospital %>% run(until=400)
shiny::runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/layout_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/tabset_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/functionality_example')
library(ggplot2)
mpg <- ggplot2::mpg   #import data
View(mpg)
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy))  #displ is engine displacement, hwy is engine fuel efficency
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy, color=class))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy, size=class))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy, alpha=class))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy, shape=class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy),
color="blue") +
labs(title="Example scatterplot",
x="Displacement", y="Highway efficency")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_point(mapping=aes(x=displ,y=hwy, color=drv)) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping=aes(color=drv)) +
geom_smooth(mapping=aes(linetype=drv))
ggplot(data=mpg) +
geom_bar(mapping=aes(x=class))
ggplot(data=mpg) +
stat_count(mapping=aes(x=class))
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
bar <- ggplot(data = mpg) +
geom_bar(
mapping = aes(x = class, fill = class),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
bar <- ggplot(data = mpg) +
geom_bar(
mapping = aes(x = class, fill = class),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar <- ggplot(data = mpg) +
geom_bar(
mapping = aes(x = class, fill = class),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar <- ggplot(data = mpg) +
geom_bar(
mapping = aes(x = class, fill = class),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
ggplot(data=mpg) +
geom_histogram(mapping=aes(x=hwy),
col="black",
fill="grey")
mid <- ggplot::midwest
mid <- ggplot2::midwest
View(mid)
library(fitdistrplus)
#Import data and plot
data("groundbeef", package = "fitdistrplus")
View(groundbeef)
my_data <- groundbeef$serving
plot(my_data, pch=20)
#Plot empirical density and cumulative distribution
plotdist(my_data, histo = TRUE, demp = TRUE)
ggplot(data=my_data) +
geom_histogram(mapping=aes(x=my_data),
col="black",
fill="grey")
ggplot(data=groundbeef) +
geom_histogram(mapping=aes(x=serving),
col="black",
fill="grey")
ggplot(data=groundbeef) +
geom_histogram(mapping=aes(x=serving),bins=20,
col="black",
fill="grey")
ggplot(data=groundbeef) +
geom_histogram(mapping=aes(x=serving),bins=10,
col="black",
fill="grey")
#Plot empirical density and cumulative distribution
plotdist(my_data, histo = TRUE, demp = TRUE)
#Cullen and Frey graph
descdist(my_data, discrete=FALSE, boot=500)
#Fit specific distributions
fit_w  <- fitdist(my_data, "weibull")
fit_g  <- fitdist(my_data, "gamma")
fit_ln <- fitdist(my_data, "lnorm")
summary(fit_ln)
dists <- c("gamma","lnorm","weibull")
fit <- list()
for (i in 1:length(dists)){
fit[[i]]  <- fitdist(my_data, dists[i])
}
for (i in 1:length(dists)){
print(summary(fit[[i]]))
}
par(mfrow=c(2,2))
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
cdfcomp (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
qqcomp  (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
ppcomp  (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
par(mfrow=c(2,2))
plot.legend <- dists
denscomp(fit, legendtext = plot.legend)
cdfcomp (fit, legendtext = plot.legend)
qqcomp  (fit, legendtext = plot.legend)
ppcomp  (fit, legendtext = plot.legend)
library(actuar)
fit_ll <- fitdist(my_data, "llogis", start = list(shape = 1, scale = 500))
fit_P  <- fitdist(my_data, "pareto", start = list(shape = 1, scale = 500))
fit_B  <- fitdist(my_data, "burr",   start = list(shape1 = 0.3, shape2 = 1, rate = 1))
cdfcomp(list(fit_ln, fit_ll, fit_P, fit_B), xlogscale = TRUE, ylogscale = TRUE,
legendtext = c("lognormal", "loglogistic", "Pareto", "Burr"), lwd=2)
#Goodness of fit statistics
gofstat(list(fit_ln, fit_ll, fit_P, fit_B), fitnames = c("lnorm", "llogis", "Pareto", "Burr"))
ests <- bootdist(fit_B, niter = 1e3)
summary(ests)
#Plot
plot(ests)
#95% bootstrap confidence interval
quantile(ests, probs=.05)
View(fit_B)
fit_B
summary(fit_B)
#Goodness of fit statistics
g <- gofstat(list(fit_ln, fit_ll, fit_P, fit_B), fitnames = c("lnorm", "llogis", "Pareto", "Burr"))
View(g)
summary(g)
g
View(g)
View(fit)
View(g)
#Goodness of fit statistics
f <- gofstat(fit, fitnames=c("gamma","lnorm","weibull"))
View(f)
library(fitdistrplus)
#set the random seed
set.seed(12)
lognorm <- rlnorm(1000, meanlog=0.6, sdlog=1)
hist(lognorm)
write.csv(lognorm,"task_data.csv")
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/layout_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/tabset_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/functionality_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/reactive_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/import_example')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/dist_fit_tool')
runApp('OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/tabset_example_basic')
library(ggplot2)
mpg <- ggplot2::mpg   #import data
View(mpg)
ggplot(data=mpg)  #assign data to ggplot object
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy))
View(mpg)
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy, color=class))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy, size=class))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy, alpha=class))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ,y=hwy, shape=class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy),
color="blue") +
labs(title="Example scatterplot",
x="Displacement", y="Highway efficency")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_point(mapping=aes(x=displ,y=hwy, color=drv)) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping=aes(color=drv)) +
geom_smooth(mapping=aes(linetype=drv))
ggplot(data=mpg) +
geom_bar(mapping=aes(x=class))
ggplot(data=mpg) +
stat_count(mapping=aes(x=class))
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
bar <- ggplot(data = mpg) +
geom_bar(
mapping = aes(x = class, fill = class),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar
bar + coord_flip()
bar + coord_polar()
setwd("~/OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/ggplot")
ggsave("my_plot.png", plot=bar)
ggplot(data=mpg) +
geom_histogram(mapping=aes(x=hwy),
col="black",
fill="grey")
library(fitdistrplus)
data("groundbeef", package = "fitdistrplus")
my_data <- groundbeef$serving
plot(my_data, pch=20)
ggplot(data=groundbeef) +
geom_histogram(mapping=aes(x=serving),bins=10,
col="black",
fill="grey")
ggplot(data=groundbeef) +
geom_histogram(mapping=aes(x=serving),bins=20,
col="black",
fill="grey")
ggplot(data=groundbeef) +
geom_histogram(mapping=aes(x=serving),bins=5,
col="black",
fill="grey")
plotdist(my_data, histo = TRUE, demp = TRUE)
#Cullen and Frey graph
descdist(my_data, discrete=FALSE, boot=500)
dists <- c("gamma","lnorm","weibull")
fit <- list()
for (i in 1:length(dists)){
fit[[i]]  <- fitdist(my_data, dists[i])
}
for (i in 1:length(dists)){
print(summary(fit[[i]]))
}
par(mfrow=c(2,2))
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
cdfcomp (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
qqcomp  (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
ppcomp  (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
par(mfrow=c(2,2))
plot.legend <- dists
denscomp(fit, legendtext = plot.legend)
cdfcomp (fit, legendtext = plot.legend)
qqcomp  (fit, legendtext = plot.legend)
ppcomp  (fit, legendtext = plot.legend)
f <- gofstat(fit, fitnames=c("gamma","lnorm","weibull"))
View(f)
fit_ll <- fitdist(my_data, "llogis", start = list(shape = 1, scale = 500))
fit_P  <- fitdist(my_data, "pareto", start = list(shape = 1, scale = 500))
fit_B  <- fitdist(my_data, "burr",   start = list(shape1 = 0.3, shape2 = 1, rate = 1))
cdfcomp(list(fit_ln, fit_ll, fit_P, fit_B), xlogscale = TRUE, ylogscale = TRUE,
legendtext = c("lognormal", "loglogistic", "Pareto", "Burr"), lwd=2)
#Fitting using non-base distributions from the actuar package
library(actuar)
fit_ln <- fitdist(my_data, "lnorm")
fit_ll <- fitdist(my_data, "llogis", start = list(shape = 1, scale = 500))
fit_P  <- fitdist(my_data, "pareto", start = list(shape = 1, scale = 500))
fit_B  <- fitdist(my_data, "burr",   start = list(shape1 = 0.3, shape2 = 1, rate = 1))
cdfcomp(list(fit_ln, fit_ll, fit_P, fit_B), xlogscale = TRUE, ylogscale = TRUE,
legendtext = c("lognormal", "loglogistic", "Pareto", "Burr"), lwd=2)
g <- gofstat(list(fit_ln, fit_ll, fit_P, fit_B), fitnames = c("lnorm", "llogis", "Pareto", "Burr"))
View(g)
ests <- bootdist(fit_B, niter = 1e3)
View(ests)
summary(ests)
#Plot
plot(ests)
#95% bootstrap confidence interval
quantile(ests, probs=.05)
shiny::runApp('~/OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/layout_example')
runApp('~/OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/tabset_example_basic')
runApp('~/OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/functionality_example')
runApp('~/OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/reactive_example')
runApp('~/OneDrive/Working files/HSMA_PSMA/HSMA 2020/Advanced_R/r_shiny/import_example')
shiny::runApp('~/Dropbox/Work files/Working files/HSMA_PSMA/HSMA 2021/Advanced_R/r_shiny/layout_example')
runApp('~/Dropbox/Work files/Working files/HSMA_PSMA/HSMA 2021/Advanced_R/r_shiny/tabset_example_basic')
runApp('~/Dropbox/Work files/Working files/HSMA_PSMA/HSMA 2021/Advanced_R/r_shiny/functionality_example')
runApp('~/Dropbox/Work files/Working files/HSMA_PSMA/HSMA 2021/Advanced_R/r_shiny/reactive_example')
runApp('~/Dropbox/Work files/Working files/HSMA_PSMA/HSMA 2021/Advanced_R/r_shiny/tabset_example_advanced')
runApp('~/Dropbox/Work files/Working files/HSMA_PSMA/HSMA 2021/Advanced_R/r_shiny/import_example')
runApp('~/Dropbox/Work files/Working files/HSMA_PSMA/HSMA 2021/Advanced_R/r_shiny/dist_fit_tool')
runApp('~/Dropbox/Work files/Working files/HSMA_PSMA/HSMA 2021/Advanced_R/r_shiny/dist_fit_tool')
